/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import {InjectFlags, resolveForwardRef} from '../../di';
import {assertInjectImplementationNotEqual} from '../../di/inject_switch';
import {ɵɵinject} from '../../di/injector_compatibility';
import {ProviderToken} from '../../di/provider_token';
import {getOrCreateInjectable} from '../di';
import {TDirectiveHostNode} from '../interfaces/node';
import {getCurrentTNode, getLView} from '../state';

/**
 * Returns the value associated to the given token from the injectors.
 *
 * 从注入器返回与给定标记关联的值。
 *
 * `directiveInject` is intended to be used for directive, component and pipe factories.
 *  All other injection use `inject` which does not walk the node injector tree.
 *
 * DirectiveInject 旨在用于 `directiveInject` 、组件和管道工厂。所有其他 `inject` 使用 injection
 * ，它不会遍历节点注入器树。
 *
 * Usage example \(in factory function\):
 *
 * 用法示例（在工厂函数中）：
 *
 * ```ts
 * class SomeDirective {
 *   constructor(directive: DirectiveA) {}
 *
 *   static ɵdir = ɵɵdefineDirective({
 *     type: SomeDirective,
 *     factory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))
 *   });
 * }
 * ```
 *
 * @param token the type or token to inject
 *
 * 要注入的类型或标记
 * @param flags Injection flags
 *
 * 注入标志
 * @returns
 *
 * the value from the injector or `null` when not found
 *
 * 来自注入器的值或找不到时为 `null`
 * @codeGenApi
 */
export function ɵɵdirectiveInject<T>(token: ProviderToken<T>): T;
export function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags: InjectFlags): T;
export function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags = InjectFlags.Default): T|null {
  const lView = getLView();
  // Fall back to inject() if view hasn't been created. This situation can happen in tests
  // if inject utilities are used before bootstrapping.
  if (lView === null) {
    // Verify that we will not get into infinite loop.
    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);
    return ɵɵinject(token, flags);
  }
  const tNode = getCurrentTNode();
  return getOrCreateInjectable<T>(
      tNode as TDirectiveHostNode, lView, resolveForwardRef(token), flags);
}

/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * 抛出一个错误，表明编译器无法为特定类生成工厂函数。
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * 此指令允许在关闭 ngDevMode
 * 时优化实际的错误消息，节省生成的代码的字节，同时仍然在开发模式下提供良好的体验。
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * 这里没有提到类名，但将在生成的工厂函数名中，因此在堆栈跟踪中。
 *
 * @codeGenApi
 */
export function ɵɵinvalidFactory(): never {
  const msg =
      ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';
  throw new Error(msg);
}
